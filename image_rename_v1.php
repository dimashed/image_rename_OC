<?php

// ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ====
require_once('config.php');
require_once(DIR_SYSTEM . 'startup.php');

$registry = new Registry();
$loader = new Loader($registry);
$registry->set('load', $loader);
$loader->model('catalog/product');
$loader->model('setting/setting');
$loader->model('catalog/category');
$loader->model('tool/image');
$db = new DB(DB_DRIVER, DB_HOSTNAME, DB_USERNAME, DB_PASSWORD, DB_DATABASE, DB_PORT);
$registry->set('db', $db);

// ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
$dry_run = true; // true ‚Äî –ª–∏—à–µ –ª–æ–≥, false ‚Äî –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î

$scan_folder = $argv[1] ?? 'catalog/';
$recursive_scan = isset($argv[2]) && strtolower($argv[2]) === 'true';
$log_file = DIR_LOGS . 'image_rename.log';
$language_id = 2; // 1 ‚Äî —É–∫—Ä, 2 ‚Äî —Ä–æ—Å.

// ==== –õ–æ–≥—É–≤–∞–Ω–Ω—è ====
function logMessage($message) {
    global $log_file;
    file_put_contents($log_file, $message . PHP_EOL, FILE_APPEND);
}

// ==== –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è ====
function transliterate($text) {
    $text = mb_strtolower($text, 'UTF-8');
    $text = strtr($text, [
        '–∞'=>'a','–±'=>'b','–≤'=>'v','–≥'=>'h','“ë'=>'g','–¥'=>'d','–µ'=>'e','—î'=>'ye','–∂'=>'zh','–∑'=>'z','–∏'=>'y','—ñ'=>'i','—ó'=>'yi','–π'=>'i',
        '–∫'=>'k','–ª'=>'l','–º'=>'m','–Ω'=>'n','–æ'=>'o','–ø'=>'p','—Ä'=>'r','—Å'=>'s','—Ç'=>'t','—É'=>'u','—Ñ'=>'f','—Ö'=>'kh','—Ü'=>'ts','—á'=>'ch',
        '—à'=>'sh','—â'=>'shch','—é'=>'yu','—è'=>'ya','—å'=>'','‚Äô'=>'','—ã'=>'y','—ç'=>'e',
        '–ê'=>'A','–ë'=>'B','–í'=>'V','–ì'=>'H','“ê'=>'G','–î'=>'D','–ï'=>'E','–Ñ'=>'Ye','–ñ'=>'Zh','–ó'=>'Z','–ò'=>'Y','–Ü'=>'I','–á'=>'Yi','–ô'=>'I',
        '–ö'=>'K','–õ'=>'L','–ú'=>'M','–ù'=>'N','–û'=>'O','–ü'=>'P','–†'=>'R','–°'=>'S','–¢'=>'T','–£'=>'U','–§'=>'F','–•'=>'Kh','–¶'=>'Ts','–ß'=>'Ch',
        '–®'=>'Sh','–©'=>'Shch','–Æ'=>'Yu','–Ø'=>'Ya','–¨'=>'','–´'=>'Y','–≠'=>'E'
    ]);
    $text = preg_replace('/[^A-Za-z0-9\- ]/', '', $text);
    $text = preg_replace('/\s+/', '-', $text);
    $text = preg_replace('/-+/', '-', $text);
    return trim($text, '-');
}

// ==== –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ ====
function getAvailableFilename($directory, $basename, $extension, &$used) {
    $i = 0;
    $filename = $basename . $extension;
    while (in_array(strtolower($filename), $used) || file_exists($directory . '/' . $filename)) {
        $filename = $basename . '-' . (++$i) . $extension;
    }
    $used[] = strtolower($filename);
    return $filename;
}

// ==== –°—Ç–∞—Ä—Ç ====
$full_dir = rtrim(DIR_IMAGE, '/') . '/' . trim($scan_folder, '/');

logMessage("==== –°—Ç–∞—Ä—Ç: " . date('Y-m-d H:i:s') . " | –ü–∞–ø–∫–∞: $full_dir | –†–µ–∫—É—Ä—Å—ñ—è: " . ($recursive_scan ? 'ON' : 'OFF') . " ====");

$found = false;
$used_names = [];

$files = [];

if (!is_dir($full_dir)) {
    logMessage("‚ùå –í–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ –Ω–µ —ñ—Å–Ω—É—î: $full_dir");
    exit("–ü–∞–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞\n");
}

// ==== –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ ====
if ($recursive_scan) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($full_dir));
    foreach ($rii as $file) {
        if ($file->isFile()) {
            $files[] = $file;
        }
    }
} else {
    foreach (glob($full_dir . '/*') as $filename) {
        if (is_file($filename)) {
            $files[] = new SplFileInfo($filename);
        }
    }
}

// ==== –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ====
foreach ($files as $file) {
    $full_path = $file->getPathname();
    $relative_path = str_replace(DIR_IMAGE, '', $full_path);

    // --- –ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
    $query = $db->query("SELECT product_id FROM " . DB_PREFIX . "product WHERE image = '" . $db->escape($relative_path) . "'");
    if ($query->num_rows) {
        $row = $query->row;
        $product_query = $db->query("SELECT name FROM " . DB_PREFIX . "product_description WHERE product_id = " . (int)$row['product_id'] . " AND language_id=" . (int)$language_id . " LIMIT 1");

        if (!$product_query->num_rows) continue;

        $name = transliterate($product_query->row['name']);
        $name = substr($name, 0, 100);

        $new_filename = getAvailableFilename($file->getPath(), $name, '.' . $file->getExtension(), $used_names);
        $new_full_path = $file->getPath() . '/' . $new_filename;
        $new_relative_path = str_replace(DIR_IMAGE, '', $new_full_path);

        logMessage("üîç " . ($dry_run ? "DRY-RUN" : "RENAMING") . ": $relative_path ‚Üí $new_relative_path");

        if (!$dry_run) {
            rename($full_path, $new_full_path);
            $db->query("UPDATE " . DB_PREFIX . "product SET image = '" . $db->escape($new_relative_path) . "' WHERE product_id = " . (int)$row['product_id']);
        }

        $found = true;
        continue;
    }

    // --- –î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
    $query = $db->query("SELECT product_id FROM " . DB_PREFIX . "product_image WHERE image = '" . $db->escape($relative_path) . "'");
    if ($query->num_rows) {
        $row = $query->row;
        $meta_query = $db->query("SELECT meta_title FROM " . DB_PREFIX . "product_description WHERE product_id = " . (int)$row['product_id'] . " AND language_id=" . (int)$language_id . " LIMIT 1");

        if (!$meta_query->num_rows) continue;

        $meta = transliterate($meta_query->row['meta_title']);
        $meta = substr($meta, 0, 55);

        $new_filename = getAvailableFilename($file->getPath(), $meta, '.' . $file->getExtension(), $used_names);
        $new_full_path = $file->getPath() . '/' . $new_filename;
        $new_relative_path = str_replace(DIR_IMAGE, '', $new_full_path);

        logMessage("üîç " . ($dry_run ? "DRY-RUN" : "RENAMING") . ": $relative_path ‚Üí $new_relative_path");

        if (!$dry_run) {
            rename($full_path, $new_full_path);
            $db->query("UPDATE " . DB_PREFIX . "product_image SET image = '" . $db->escape($new_relative_path) . "' WHERE product_id = " . (int)$row['product_id'] . " AND image = '" . $db->escape($relative_path) . "'");
        }

        $found = true;
    }
}

if (!$found) {
    logMessage("‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è.");
}

echo "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
logMessage("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.\n");
